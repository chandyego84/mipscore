$date
	Thu Apr 13 11:39:06 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module im_tb $end
$var reg 1 ! clk $end
$var reg 1 " rst $end
$var integer 32 # counter [31:0] $end
$scope module taylor $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 6 $ opcode [5:0] $end
$var wire 10 % nextPc [9:0] $end
$var wire 32 & nextInst [31:0] $end
$var wire 6 ' funct [5:0] $end
$var wire 2 ( aluOp [1:0] $end
$var wire 4 ) aluControlOp [3:0] $end
$var reg 32 * inst [31:0] $end
$var reg 10 + pc [9:0] $end
$scope module aluControlUnit $end
$var wire 6 , funct [5:0] $end
$var wire 2 - aluOp [1:0] $end
$var reg 4 . aluControlOp [3:0] $end
$upscope $end
$scope module controller $end
$var wire 6 / opcode [5:0] $end
$var reg 2 0 aluOp [1:0] $end
$var reg 1 1 aluSrc $end
$var reg 1 2 branch $end
$var reg 1 3 jump $end
$var reg 1 4 memRead $end
$var reg 1 5 memToReg $end
$var reg 1 6 memWrite $end
$var reg 1 7 regDest $end
$var reg 1 8 regWrite $end
$upscope $end
$scope module fetchBlock $end
$var wire 32 9 inst [31:0] $end
$var wire 10 : pc [9:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 :
b100000000100000000000000000001 9
x8
x7
x6
x5
x4
x3
x2
x1
bx 0
bx /
bx .
bx -
bx ,
b0 +
bx *
bx )
bx (
bx '
b100000000100000000000000000001 &
b1 %
bx $
b0 #
0"
0!
$end
#5
b10 )
b10 .
02
03
05
04
06
b0 (
b0 -
b0 0
11
18
07
b1000 $
b1000 /
b1 '
b1 ,
b10 %
b1001010100100100000100000 &
b1001010100100100000100000 9
b1 +
b1 :
b100000000100000000000000000001 *
b1 #
1!
#10
0!
#15
b10 (
b10 -
b10 0
01
17
b0 $
b0 /
b100000 '
b100000 ,
b10 #
b11 %
b100000000100000000000000000110 &
b100000000100000000000000000110 9
b10 +
b10 :
b1001010100100100000100000 *
1!
#20
0!
#25
b0 (
b0 -
b0 0
11
07
b1000 $
b1000 /
b110 '
b110 ,
b100 %
b1001010100100100000100010 &
b1001010100100100000100010 9
b11 +
b11 :
b100000000100000000000000000110 *
b11 #
1!
#30
0!
#35
b110 )
b110 .
b10 (
b10 -
b10 0
01
17
b0 $
b0 /
b100010 '
b100010 ,
b100 #
b101 %
b10001001010100000000000101010 &
b10001001010100000000000101010 9
b100 +
b100 :
b1001010100100100000100010 *
1!
#40
0!
#45
12
b1 (
b1 -
b1 0
08
07
b100 $
b100 /
b101010 '
b101010 ,
b110 %
b1001010100100100000100010 &
b1001010100100100000100010 9
b101 +
b101 :
b10001001010100000000000101010 *
b101 #
1!
#50
0!
#55
02
b10 (
b10 -
b10 0
18
17
b0 $
b0 /
b100010 '
b100010 ,
b110 #
b111 %
b10001001010100000000000101011 &
b10001001010100000000000101011 9
b110 +
b110 :
b1001010100100100000100010 *
1!
#60
0!
#65
12
b1 (
b1 -
b1 0
08
07
b100 $
b100 /
b101011 '
b101011 ,
b1000 %
b10001100000010100000000000000000 &
b10001100000010100000000000000000 9
b111 +
b111 :
b10001001010100000000000101011 *
b111 #
1!
#70
0!
#75
b10 )
b10 .
02
15
14
b0 (
b0 -
b0 0
11
18
b100011 $
b100011 /
b0 '
b0 ,
b1000 #
b1001 %
b1000 +
b1000 :
b10001100000010100000000000000000 *
1!
#80
0!
#85
b1010 %
bx &
bx 9
b1001 +
b1001 :
b1001 #
1!
#90
0!
#95
bx $
bx /
bx '
bx ,
b1011 %
b1010 +
b1010 :
bx *
1!
