$date
	Fri Apr 14 00:41:09 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module im_tb $end
$var reg 1 ! clk $end
$var reg 1 " rst $end
$var integer 32 # counter [31:0] $end
$scope module taylor $end
$var wire 1 ! clk $end
$var wire 1 $ regDest $end
$var wire 1 % regWrite $end
$var wire 1 " rst $end
$var wire 32 & writeData [31:0] $end
$var wire 5 ' rt [4:0] $end
$var wire 5 ( rs [4:0] $end
$var wire 5 ) rd [4:0] $end
$var wire 6 * opcode [5:0] $end
$var wire 10 + nextPc [9:0] $end
$var wire 32 , nextInst [31:0] $end
$var wire 26 - j_addr [25:0] $end
$var wire 16 . i_imm [15:0] $end
$var wire 6 / funct [5:0] $end
$var wire 2 0 aluOp [1:0] $end
$var wire 4 1 aluControlOp [3:0] $end
$var reg 32 2 inst [31:0] $end
$var reg 10 3 pc [9:0] $end
$scope module aluControlUnit $end
$var wire 6 4 funct [5:0] $end
$var wire 2 5 aluOp [1:0] $end
$var reg 4 6 aluControlOp [3:0] $end
$upscope $end
$scope module controller $end
$var wire 6 7 opcode [5:0] $end
$var reg 2 8 aluOp [1:0] $end
$var reg 1 9 aluSrc $end
$var reg 1 : branch $end
$var reg 1 ; jump $end
$var reg 1 < memRead $end
$var reg 1 = memToReg $end
$var reg 1 > memWrite $end
$var reg 1 ? regDest $end
$var reg 1 @ regWrite $end
$upscope $end
$scope module fetchBlock $end
$var wire 32 A inst [31:0] $end
$var wire 10 B pc [9:0] $end
$upscope $end
$scope module regUnit $end
$var wire 5 C rd [4:0] $end
$var wire 1 $ regDest $end
$var wire 1 % regWrite $end
$var wire 5 D rs [4:0] $end
$var wire 5 E rt [4:0] $end
$var wire 32 F writeData [31:0] $end
$var reg 32 G rsData [31:0] $end
$var reg 32 H rtData [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx H
bx G
bz F
bx E
bx D
bx C
b0 B
b100000000100000000000000000001 A
x@
x?
x>
x=
x<
x;
x:
x9
bx 8
bx 7
bx 6
bx 5
bx 4
b0 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
b100000000100000000000000000001 ,
b1 +
bx *
bx )
bx (
bx '
bz &
z%
z$
b0 #
0"
0!
$end
#5
b10 1
b10 6
b0 G
0:
0;
0=
0<
0>
b0 0
b0 5
b0 8
19
1@
0?
b0 (
b0 D
b10000 '
b10000 E
b0 )
b0 C
b1 .
b100000000000000000001 -
b1000 *
b1000 7
b1 /
b1 4
b10 +
b1001010100100100000100000 ,
b1001010100100100000100000 A
b1 3
b1 B
b100000000100000000000000000001 2
b1 #
1!
#10
0!
#15
bx G
b10 0
b10 5
b10 8
09
1?
b1001 (
b1001 D
b1010 '
b1010 E
b1001 )
b1001 C
b100100000100000 .
b1001010100100100000100000 -
b0 *
b0 7
b100000 /
b100000 4
b10 #
b11 +
b100000000100000000000000000110 ,
b100000000100000000000000000110 A
b10 3
b10 B
b1001010100100100000100000 2
1!
#20
0!
#25
b0 G
b0 0
b0 5
b0 8
19
0?
b0 (
b0 D
b10000 '
b10000 E
b0 )
b0 C
b110 .
b100000000000000000110 -
b1000 *
b1000 7
b110 /
b110 4
b100 +
b1001010100100100000100010 ,
b1001010100100100000100010 A
b11 3
b11 B
b100000000100000000000000000110 2
b11 #
1!
#30
0!
#35
b110 1
b110 6
bx G
b10 0
b10 5
b10 8
09
1?
b1001 (
b1001 D
b1010 '
b1010 E
b1001 )
b1001 C
b100100000100010 .
b1001010100100100000100010 -
b0 *
b0 7
b100010 /
b100010 4
b100 #
b101 +
b10001001010100000000000101010 ,
b10001001010100000000000101010 A
b100 3
b100 B
b1001010100100100000100010 2
1!
#40
0!
#45
1:
b1 0
b1 5
b1 8
0@
0?
b0 )
b0 C
b101010 .
b1001010100000000000101010 -
b100 *
b100 7
b101010 /
b101010 4
b110 +
b1001010100100100000100010 ,
b1001010100100100000100010 A
b101 3
b101 B
b10001001010100000000000101010 2
b101 #
1!
#50
0!
#55
0:
b10 0
b10 5
b10 8
1@
1?
b1001 )
b1001 C
b100100000100010 .
b1001010100100100000100010 -
b0 *
b0 7
b100010 /
b100010 4
b110 #
b111 +
b10001001010100000000000101011 ,
b10001001010100000000000101011 A
b110 3
b110 B
b1001010100100100000100010 2
1!
#60
0!
#65
1:
b1 0
b1 5
b1 8
0@
0?
b0 )
b0 C
b101011 .
b1001010100000000000101011 -
b100 *
b100 7
b101011 /
b101011 4
b1000 +
b10001100000010100000000000000000 ,
b10001100000010100000000000000000 A
b111 3
b111 B
b10001001010100000000000101011 2
b111 #
1!
#70
0!
#75
b10 1
b10 6
b0 G
0:
1=
1<
b0 0
b0 5
b0 8
19
1@
b0 (
b0 D
b0 .
b10100000000000000000 -
b100011 *
b100011 7
b0 /
b0 4
b1000 #
b1001 +
b1000 3
b1000 B
b10001100000010100000000000000000 2
1!
#80
0!
#85
b1010 +
bx ,
bx A
b1001 3
b1001 B
b1001 #
1!
#90
0!
#95
bx (
bx D
bx '
bx E
bx )
bx C
bx .
bx -
bx *
bx 7
bx /
bx 4
b1011 +
b1010 3
b1010 B
bx 2
1!
