$date
	Fri Apr 14 21:09:42 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module im_tb $end
$var reg 1 ! clk $end
$var reg 1 " rst $end
$var integer 32 # counter [31:0] $end
$scope module taylor $end
$var wire 1 ! clk $end
$var wire 1 $ regDest $end
$var wire 1 % regWrite $end
$var wire 1 " rst $end
$var wire 32 & writeData [31:0] $end
$var wire 32 ' rtData [31:0] $end
$var wire 5 ( rt [4:0] $end
$var wire 32 ) rsData [31:0] $end
$var wire 5 * rs [4:0] $end
$var wire 5 + rd [4:0] $end
$var wire 6 , opcode [5:0] $end
$var wire 10 - nextPc [9:0] $end
$var wire 32 . nextInst [31:0] $end
$var wire 26 / j_addr [25:0] $end
$var wire 16 0 i_imm [15:0] $end
$var wire 6 1 funct [5:0] $end
$var wire 2 2 aluOp [1:0] $end
$var wire 4 3 aluControlOp [3:0] $end
$var reg 32 4 inst [31:0] $end
$var reg 10 5 pc [9:0] $end
$scope module aluControlUnit $end
$var wire 6 6 funct [5:0] $end
$var wire 2 7 aluOp [1:0] $end
$var reg 4 8 aluControlOp [3:0] $end
$upscope $end
$scope module controller $end
$var wire 6 9 opcode [5:0] $end
$var reg 2 : aluOp [1:0] $end
$var reg 1 ; aluSrc $end
$var reg 1 < branch $end
$var reg 1 = jump $end
$var reg 1 > memRead $end
$var reg 1 ? memToReg $end
$var reg 1 @ memWrite $end
$var reg 1 A regDest $end
$var reg 1 B regWrite $end
$upscope $end
$scope module fetchBlock $end
$var wire 32 C inst [31:0] $end
$var wire 10 D pc [9:0] $end
$upscope $end
$scope module regUnit $end
$var wire 5 E rd [4:0] $end
$var wire 1 $ regDest $end
$var wire 1 % regWrite $end
$var wire 5 F rs [4:0] $end
$var wire 5 G rt [4:0] $end
$var wire 32 H writeData [31:0] $end
$var reg 32 I rsData [31:0] $end
$var reg 32 J rtData [31:0] $end
$var reg 5 K writeReg [4:0] $end
$var integer 32 L r [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b100000 L
bx K
bx J
bx I
bz H
bx G
bx F
bx E
b0 D
b100000000001000000000000011011 C
xB
xA
x@
x?
x>
x=
x<
x;
bx :
bx 9
bx 8
bx 7
bx 6
b0 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
b100000000001000000000000011011 .
b1 -
bx ,
bx +
bx *
bx )
bx (
bx '
bz &
z%
z$
b0 #
0"
0!
$end
#5
b10 3
b10 8
b0 '
b0 J
b0 )
b0 I
b0x00 K
0<
0=
0?
0>
0@
b0 2
b0 7
b0 :
1;
1B
0A
b0 *
b0 F
b100 (
b100 G
b0 +
b0 E
b11011 0
b1000000000000011011 /
b1000 ,
b1000 9
b11011 1
b11011 6
b10 -
b100000000001010000000000011011 .
b100000000001010000000000011011 C
b1 5
b1 D
b100000000001000000000000011011 4
b1 #
1!
#10
0!
#15
b0x0x K
b101 (
b101 G
b1010000000000011011 /
b10 #
b11 -
b100001010011000000100000 .
b100001010011000000100000 C
b10 5
b10 D
b100000000001010000000000011011 4
1!
#20
0!
#25
b1xx K
b10 2
b10 7
b10 :
0;
1A
b100 *
b100 F
b110 +
b110 E
b11000000100000 0
b100001010011000000100000 /
b0 ,
b0 9
b100000 1
b100000 6
b100 -
b101001000011100000100010 .
b101001000011100000100010 C
b11 5
b11 D
b100001010011000000100000 4
b11 #
1!
#30
0!
#35
b101 *
b101 F
b100 (
b100 G
b111 +
b111 E
b11100000100010 0
b101001000011100000100010 /
b100010 1
b100010 6
b100 #
b101 -
b111001100100000000101010 .
b111001100100000000101010 C
b100 5
b100 D
b101001000011100000100010 4
1!
#40
0!
#45
b0xxx0 K
b111 *
b111 F
b110 (
b110 G
b1000 +
b1000 E
b100000000101010 0
b111001100100000000101010 /
b101010 1
b101010 6
b110 -
b111000000100100000100101 .
b111000000100100000100101 C
b101 5
b101 D
b111001100100000000101010 4
b101 #
1!
#50
0!
#55
b0x00x K
b0 (
b0 G
b1001 +
b1001 E
b100100000100101 0
b111000000100100000100101 /
b100101 1
b100101 6
b110 #
b111 -
b111000000101000000100100 .
b111000000101000000100100 C
b110 5
b110 D
b111000000100100000100101 4
1!
#60
0!
#65
b1010 +
b1010 E
b101000000100100 0
b111000000101000000100100 /
b100100 1
b100100 6
b1000 -
b1110101100001000000 .
b1110101100001000000 C
b111 5
b111 D
b111000000101000000100100 4
b111 #
1!
#70
0!
#75
b0xx11 K
b0 *
b0 F
b111 (
b111 G
b1011 +
b1011 E
b101100001000000 0
b1110101100001000000 /
b0 1
b0 6
b1000 #
b1001 -
b1110110000001000010 .
b1110110000001000010 C
b1000 5
b1000 D
b1110101100001000000 4
1!
#80
0!
#85
b1100 +
b1100 E
b110000001000010 0
b1110110000001000010 /
b10 1
b10 6
b1010 -
bx .
bx C
b1001 5
b1001 D
b1110110000001000010 4
b1001 #
1!
#90
0!
#95
bx '
bx J
bx )
bx I
bx K
bx *
bx F
bx (
bx G
bx +
bx E
bx 0
bx /
bx ,
bx 9
bx 1
bx 6
b1011 -
b1010 5
b1010 D
bx 4
1!
